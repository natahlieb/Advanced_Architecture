`timescale 1ps/1ps


//mov successfully implemented.

module main();

    initial begin
        $dumpfile("cpu.vcd");
        $dumpvars(1,main);
    end



    //bit mask
    reg [15:0] mask;
 
    //conditionals
    reg is_hlt = 0;
    reg w_isTaken = 0;
    wire d_stall;// =  (mask[d_ra] || mask[d_rb] || mask[d_rt]) & (d_valid);
    reg is_init = 1;
    wire [15:0] w_target= (w_inst[15:12]==2) ? w_inst[11:0]:
                          (w_inst[15:12] == 6) ? (w_pc + w_inst[3:0]):
                          100000;
    //reg [15:0] pc_target;
    //assign w_target = pc_target;    
    
       // clock
    wire clk;
    clock c0(clk);

    
   
    // fetch 
      //get instructions
      wire [15:0]next_pc =  (is_init==1) ? 0:
                            (w_isTaken==1) ? w_target:
                            (is_hlt==1) ? w_pc:
                            f_pc +1;

                           // (d_stall==1)? d_pc:
                           // f_pc+1;
      wire [15:0]d_inst;

      //get memory
      wire [15:0] d_add = (x_inst[15:12]==4) ? x_inst[11:4]: 
                          (x_inst[15:12]==5) ? x_result:
                          10000000000000;

     
      wire [15:0] ret_val;
       
      mem i0(clk, next_pc, d_inst , d_add, ret_val);

        
    // PC
    reg [15:0] f_pc;
    reg [15:0] d_pc;
    reg [15:0] r_pc;
    reg [15:0] x_pc;
    reg [15:0] l_pc;
    reg [15:0] w_pc;

    //hold inst
    reg [15:0] r_inst;
    reg [15:0] x_inst;
    reg [15:0] l_inst;
    reg [15:0] w_inst;

   
    //instructions valid?
    reg f_valid;
    reg d_valid;
    reg r_valid;
    reg x_valid;
    reg l_valid;
    reg w_valid;


    // decode
    wire [3:0] ra = d_inst[11:8];
    wire [3:0] d_ra = d_inst[11:8];
    wire [3:0] rb = d_inst[7:4];
    wire [3:0] d_rb = d_inst[7:4];
    wire [3:0] d_rt = d_inst[3:0];


    //returned values
    wire [15:0]va;
    reg [3:0] x_va;
    reg [3:0] l_va;
    reg [3:0] w_va;

    wire [15:0]vb;
    reg [3:0] x_vb;
    reg [3:0] l_vb;
    reg [3:0] w_vb;


    //values for add, ldr
    wire [15:0] x_result = va + vb;
    reg [15:0] l_result;
    reg [15:0] w_result;

    //values for jeq
    wire [15:0] x_equal = va == vb;
    reg [15:0] l_equal;
    reg [15:0] w_equal;
    wire [15:0] jeq_value = w_pc + w_inst[3:0];
    
    //writing
    wire [15:0]res = (w_inst[15:12]==0) ? w_inst[11:4] : //move
                     (w_inst[15:12]==1) ? w_result:  //add
                     (w_inst[15:12]==4) ? ret_val: //load
                     (w_inst[15:12]==5) ? ret_val: //ldr
                     10000;

    wire [3:0] write_to = w_inst[3:0];

    
    wire ren0 = (d_inst[15:12]==1) ? 1:
                (d_inst[15:12]==5) ? 1:
                (d_inst[15:12]==6) ? 1:
                 0;
    wire ren1 =  (d_inst[15:12]==1) ? 1:
                 (d_inst[15:12]==5) ? 1:
                 (d_inst[15:12]==6) ? 1:
                 0;

    //wire wen;
    reg write_enabled;


    // registers
    regs rf(clk,
         ren0, ra, va,
         ren1, rb, vb, 
         write_enabled, write_to, res);

    //counter;
    counter ctr((is_hlt == 1 && w_valid == 0),clk);

        
    //check if halting and if valid
    always @(posedge clk) begin
       if(is_hlt == 1) begin
           f_valid <= 0;
       end
       else begin
           f_valid <= 1;
       end

       d_valid <= f_valid & (~w_isTaken); // & (~d_stall);
       r_valid <= d_valid & (~w_isTaken); // & (~d_stall); 
       x_valid <= r_valid & (~w_isTaken); // & (~d_stall); 
       l_valid <= x_valid & (~w_isTaken); // & (~d_stall); 
       w_valid <= l_valid & (~w_isTaken); // & (~d_stall); 

    end

    //set write_enabled equal to false if halting or jumping
 //    always @(posedge clk && (w_inst[15:12]==3 || w_inst[15:12]==2 || w_inst[15:12]==6)) begin
 //        write_enabled <= 0;
 //   end

    //write values for writing instructions
    always @(posedge clk && w_valid) begin

           //mov 
           if(w_inst[15:12] == 0) begin
               write_enabled <= 1;
           end

           //add
           else if(w_inst[15:12]==1) begin
               write_enabled <= 1;
           end


           //ld
           else if(w_inst[15:12] == 4) begin
              write_enabled <=1;
           end

           //ldr
           else if(w_inst[15:12] == 5) begin
              write_enabled <=1;
           end
           
           else begin
               write_enabled <= 0;
           end

    end


    //see if we have jumps, adjust target pc and w_isTaken
    always @(posedge clk) begin
        //jmp
        if(w_valid==1 && w_inst[15:12] == 2 && w_isTaken==0) begin
            w_isTaken <= 1;
            //pc_target <= w_inst[11:0];
        end
        //jeq
        else if(w_valid == 1 && w_inst[15:12]==6 && w_isTaken == 0 && w_equal == 1) begin
            w_isTaken <= 1;
            //pc_target <= jeq_value;
        end
        else begin
            w_isTaken <= 0;
        end

    end

    always @(posedge clk) begin
       if(w_valid != 1) begin
           w_isTaken <= 0;
       end
    end
/*
    always @(posedge clk && w_valid) begin
        if(w_inst[15:12] == 2) begin //we have a jump
            w_isTaken <= 1;
            pc_target <= w_inst[11:0];
        end

        else begin
            w_isTaken <= 0;
        end

//  (w_inst[15:12] == 2) ? w_inst[11:0]:
   //                        (w_inst[15:12] == 6) ? w_inst[3:0]:
     //                      1000000000;


    end
*/
    always @(posedge clk) begin
          //check if halt
          if(d_inst[15:12]==3) begin
              is_hlt <= 1;
          end
    end
 

    //actually move values across 
    always @(posedge clk) begin
             f_pc <= next_pc;
             d_pc <= f_pc;
             r_pc <= d_pc;
             x_pc <= r_pc;
             l_pc <= x_pc;
             w_pc <= l_pc;

             r_inst <= d_inst;
             x_inst <= r_inst;
             l_inst <= x_inst;
             w_inst <= l_inst;

             x_va <= va;
             x_vb <= vb;
             l_va <= x_va;
             l_vb <= x_vb;
             w_va <= l_va;
             w_vb <= w_vb;


             l_result <= x_result;
             w_result <= l_result;

             l_equal <= x_equal;
             w_equal <= l_equal;
                
           //fetch
           if(f_valid==1) begin
            //check if halt
           // if(l_inst[15:12]==3) begin
           //     is_hlt <= 1;
           // end
      

           end

           //decode 
           if(d_valid==1) begin

         //     r_inst <= d_inst;

             //set bi mask
             //see if already occupied -> a, b, t, i
             //if not, switch bits

               
          //     mask[d_inst[11:9]]<=1;
          //    mask[d_inst[7:4]]<=1;
          //    mask[d_inst[3:0]]<=1;
          //    mask[d_inst[11:4]]<=1;

           end

 

           //register
           if(r_valid==1) begin
         //    x_inst <= r_inst;
        //     x_va <= va;
         //    x_vb <= vb;
        
           end

           //execute
           if(x_valid==1) begin
           //  l_inst <= x_inst;
           //  l_va <= x_va;
           //  l_vb <= x_vb;
           //  l_result <= x_result;

           end

           //load
           if(l_valid==1) begin
           //  w_inst <= l_inst;
           //  w_va <= l_va;
           //  w_vb <= l_vb;
           //  w_result <= l_result;
            
           end


           //write back
           if(w_valid==1) begin

              if(mask[w_inst[11:8]]==1) begin
                mask[w_inst[11:8]]<=0;
              end
           
              if(mask[d_inst[7:4]]==1) begin
                mask[d_inst[7:4]]<=0;
              end
           
              if(mask[d_inst[3:0]]==1) begin
                mask[d_inst[3:0]]<=0;
              end

              if (mask[d_inst[11:4]]==1) begin
                mask[d_inst[11:4]]<=0;
              end

           end
            
           is_init <= 0;
           
      end

endmodule
